---
title: "Exploratory Data Analysis (EDA) for Used Cars data."
author: "Vishal Katti"
date: today
format: 
  html:
    theme: darkly
    code-fold: show
    cap-location: bottom
    number-sections: true
    fig-numbering: true
    fig-align: center
    toc: true 
    lot: true
    lof: true
    fig.width: 8
    fig.height: 5
    fig-dpi: 600
  pdf:
    fontfamily: dejavu
    toc: true 
    lot: true
    lof: true
    fig.width: 8
    fig.height: 5
    cap-location: bottom
    fig-align: center
    fig-dpi: 600
editor: visual
fig_caption_style: "numbered"
---

# Introduction

After the web-scraping activity is completed, we will now perform exploratory data analysis on the used cars details.

# Data Sources

We have 2 CSV files in the **04_CarDetailsConsolidated** which we will ingest.

::: {style="text-align: center;"}
![CSV files to be ingested](images/clipboard-4217870750.png)
:::

## Ingestion

First we load the required R libraries and create a utility function `f`

```{r}
#| label: Load Libraries
#| warning: false
#| message: false

library(tidyverse)
library(lubridate)  # To manage dates and times
library(janitor)    # To ensure consistent naming and other utilities
library(glue)       # To enable fancy printing

f <- function(x) { print(glue(x))}

format_indian <- function(x) {
  x_str <- as.character(x)
  rev_x_str <- rev(strsplit(x_str, "")[[1]])
  first_three <- c(rev_x_str[1:3],",")
  all_others <- rev_x_str[4:length(rev_x_str)]
  grouped <- paste(all_others, collapse = "") 
  grouped <- gsub("([0-9]{2})(?=[0-9])", "\\1,", grouped, perl = TRUE) 
  first_three <- paste(first_three, collapse = "")
  final <- paste0(first_three,grouped, collapse = "")
  formatted <- paste(rev(strsplit(final, "")[[1]]), collapse = "")
  return(formatted)
}
```

Since will be cleaning and combining 2 datasets, one from *cars24* and other from *carwale*, we will perform same action twice and handle some special cases in either datasets.

```{r}
#| label: Read CSV
cars24 <- read_csv("../04_CarDetailsConsolidated/cars24.csv", 
                   na = c("","NA","MISSING","Not Available", "N/A"), show_col_types = FALSE)
carwale <- read_csv("../04_CarDetailsConsolidated/carwale.csv", 
                    na = c("","NA","MISSING","Not Available","N/A"), show_col_types = FALSE)

```

::: callout-note
## "MISSING" values

In our data extraction scripts from the **03_CarDetails** folder, you would've noticed that while extracting the car attributes, we set the default value to **MISSING** if the value is not available. Thus we know for a fact that **MISSING** indicates a missing value and therefore can be explicitly set to NA while reading the CSV files.

After a quick manual verification of CSV files, we also understood that some attributes were *Not Available* or *N/A* can can be considered as `NA`.

The `read_csv` function from **readr** package allows us to explicitly mention which values to be considered as `NA` while reading the data.
:::

## Duplicates

First thing we will do is eliminate duplicates. We know there are duplicates since we had to restart our web-scraping scripts couple of times due to various issues.\
We will use the `unique` function to remove duplicates.

```{r}
#| label: Duplicates - Cars24
#| code-fold: true

preDup <- nrow(cars24)
cars24 <- unique(cars24)
f("Cars24
-------------------------------------
Before removing duplicates: {preDup}
After removing duplicates: {nrow(cars24)}
Total duplicates removed: {preDup - nrow(cars24)}")
```

```{r}
#| label: Duplicates - carwale
#| code-fold: true

preDup <- nrow(carwale)
carwale <- unique(carwale)
f("Carwale
-------------------------------------
Before removing duplicates: {preDup}
After removing duplicates: {nrow(carwale)}
Total duplicates removed: {preDup - nrow(carwale)}")
```

## Columns and Data Types

We will now look at the columns and ensure that data types of the columns are correct.

```{r}
#| label: Columns and Data Types - Cars24

str(cars24)
```

In above, we can see that `fitnessUpto` column has character datatype instead of date. We also note that the utility of the `websiteUrl` column is complete and we can remove this column from the dataset.

```{r}
#| label: Columns and Data Types - Cars24 (Clean)
cars24 <- cars24 |> 
  select(-websiteUrl) |> 
  mutate(fitnessUpto  = dmy(fitnessUpto))

str(cars24)
```

```{r}
#| label: Columns and Data Types - Carwale
str(carwale)
```

In above, we can see that `fitnessUpto` column has character datatype instead of date. We also note that the utility of the `websiteUrl` column is complete and we can remove this column from the dataset. Additionally, the `ownerNumber`, `registrationYear` and `registrationMonth` columns do not match the data type in the `cars24` dataset. Let's fix this.

```{r}
#| label: Columns and Data Types - Carwale (Clean)
#| warning: false
carwale <- carwale |> 
  select(-websiteUrl) |> 
  mutate(fitnessUpto  = dmy(fitnessUpto),
         registrationYear  = as_date(registrationYear, format = "%d/%m/%Y %H:%M:%S"),
         registrationMonth = month(registrationYear),
         registrationYear = year(registrationYear),
         registrationYear = if_else(registrationYear == 1, NA_integer_, registrationYear),
         registrationMonth = if_else(is.na(registrationYear), NA_integer_, registrationMonth),
         ownerNumber = case_match(ownerNumber,
                                  "First" ~ 1,
                                  "Second" ~ 2,
                                  "Third" ~ 3,
                                  c("Fourth", "4 or More") ~ 4,
                                  .default = NA_integer_)
         )

str(carwale)
```

Comparing the datatypes of the two datasets using waldo::compare function confirms that both datasets have same columns and datatypes and thus, can be combined together for futher clean-up.

```{r}
#| label: Compare
waldo::compare(sapply(cars24, typeof), sapply(carwale,typeof))
waldo::compare(sapply(cars24, class), sapply(carwale,class))
waldo::compare(colnames(cars24), colnames(carwale))

```

# Combined Data

Let us combine the 2 datasets.

```{r}
#| label: Combine
usedcars <- bind_rows(cars24, carwale)

f("Number of Rows: {nrow(usedcars)}")
```

# Column-wise Analysis and clean-up

```{r}
#| label: print column names
cat(names(usedcars), sep = "\n")
```

## make

Car24 has `r length(unique(cars24$make))` values for `make` column whereas Carwale has `r length(unique(carwale$make))` values. They are as follows:

```{r}
unique(cars24$make)
```

```{r}
unique(carwale$make)
```

### Observations

-   Even though Carwale has fewer records, it has more variation in terms of `make` of the used cars.
-   A few `make` values like KIA, Maruti Suzuki need to be made similar to the corresponding values in Cars24 dataset.

### Data Cleaning

```{r}
#| label: make data cleaning
usedcars <- usedcars |> 
  mutate(make = case_match(make,
                           "Kia" ~ "KIA",
                           "Maruti Suzuki" ~ "Maruti",
                           .default = make))
```

A quick look at the frequency of `make` values

```{r}
#| label: make 
#| fig-cap: Car Brands (Make)
#| echo: false
usedcars |> 
  count(make, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(make,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(make,n), y = n, label = n), size = 2, nudge_y = 50) + 
  labs(title = "Maruti leads the way!",
       subtitle = "Top 20 available used cars brands between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Car Brand (Make)") + 
  coord_flip(ylim = c(0, 3100), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

## model

Car24 has `r length(unique(cars24$model))` values for `model` column whereas Carwale has `r length(unique(carwale$model))` values.

### Observations

-   The `model` values in Carwale includes the start and end year of the model. We can remove this to make it more consistent with Cars24 data. There are also a few corrections (Letter case related) which we will perform here.

### Data Cleaning

```{r}
usedcars <- usedcars |> 
  mutate(model = str_remove(model," ?\\[.*\\]$"),
         lmodel  = str_to_lower(model))

model_bodytype_mapping <- read_csv("multi_bodyTypes.csv", show_col_types = FALSE)

usedcars <- usedcars |> 
  left_join(model_bodytype_mapping, by = c("make", "lmodel")) |> 
  mutate(model = if_else(!is.na(correctmodel), correctmodel, model),
         bodyType = if_else(!is.na(correctbodyType), correctbodyType, bodyType),
         bodyType = if_else(is.na(bodyType), correctbodyType, bodyType)) |> 
  select(-correctmodel, -correctbodyType, -lmodel)

```

A quick look at the top 20 most famous car `model`s

```{r}
#| label: model
#| fig-cap: Car Models
#| echo: false
usedcars |> 
  count(model, sort = TRUE) |> 
  slice_head(n = 20) |> 
ggplot() + 
  geom_col(aes(x = fct_reorder(model,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(model,n), y = n, label = n), size = 2, nudge_y = 10) + 
  labs(title = "Maruti Suzuki - Baleno has highest availability!",
       subtitle = "Top 20 most available used cars between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Car Model") + 
  coord_flip(ylim = c(0, 510), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

## variant

Car24 has `r length(unique(cars24$variant))` values for `variant` column whereas Carwale has `r length(unique(carwale$variant))` values.

### Observations

-   The `variant` values in Carwale includes the start and end year of the model. We can remove this to make it more consistent with Cars24 data
-   The `variant` value sometimes indicate the Engine Capacity, Transmission Type and Fuel Type.

### Data Cleaning

No need for any cleaning in `variant` column.

A quick look at the top 20 most famous car `variant`s

```{r}
#| label: variant
#| fig-cap: Car Variants
#| echo: false
usedcars |> 
  count(make, model, variant, sort = TRUE) |> 
  mutate(mmv = paste(make, model, variant)) |> 
  slice_head(n = 20) |> 
ggplot() + 
  geom_col(aes(x = fct_reorder(mmv,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(mmv,n), y = n, label = n), size = 2, nudge_y = 5) + 
  labs(title = "Maruti, Hyundai and Honda rule the roost!",
       subtitle = "Top 20 most available used cars variants between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Car Variant") + 
  coord_flip(ylim = c(0, 150), expand = TRUE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

## year

Car24 has `r length(unique(cars24$year))` values for `year` column whereas Carwale has `r length(unique(carwale$year))` values. They are as follows:

```{r}
sort(unique(cars24$year))
```

```{r}
sort(unique(carwale$year))
```

### Observations

-   Even though Carwale has fewer records, it has more variation in terms of `year` of the used cars.

### Data Cleaning

No data cleaning required for `year` column.

A quick look at the frequency of `year` values

```{r}
#| label: year
#| fig-cap: Year of the Car Model/Variant
#| echo: false

mean_age <- mean(2024 - usedcars$year)
median_age <- median(2024 - usedcars$year)

usedcars |> 
  count(year) |> 
ggplot() + 
  geom_col(aes(x = factor(year), y = n, fill = year)) +
  geom_text(aes(x = factor(year), y = n, label = n), size = 2, nudge_y = 50) + 
  geom_vline(xintercept = factor(2024 - median_age), color = "red", linetype="dashed") + 
  annotate("text",x = factor(2022 - median_age), y = 1400, label = "Median Age", color = "red") +
  labs(title = "Most used cars are 5-7 years old models",
       subtitle = "Year-wise availability between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Year") + 
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank()) 
```

## transmission

Car24 has `r length(unique(cars24$transmission))` values for `transmission` column whereas Carwale has `r length(unique(carwale$transmission))` values.

### Observations

-   Even though Carwale has fewer records, it has more variation in terms of `trasmission` of the used cars.
-   Additional information about the type of transmission in Automatic is available in Carwale dataset but not available in Cars24.

### Data Cleaning

```{r}
usedcars <- usedcars |> 
  mutate(transmission = case_when(str_detect(transmission, "Automatic|AMT") ~ "Automatic",
                                  .default = "Manual"))
```

A quick look at the frequency of `transmission` values

```{r}
#| label: transmission
#| fig-cap: Car Transmission
#| echo: false
usedcars |> 
  count(transmission, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(transmission,n, .desc = TRUE), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(transmission,n, .desc = TRUE), y = n, label = n), size = 10, nudge_y = -500, color = "white") + 
  labs(title = "Not enough Automatic transmission cars in the Market!",
       subtitle = "Used cars brands between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Car Transmission Type") + 
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

## bodyType

Car24 has `r length(unique(cars24$bodyType))` values for `bodyType` column whereas Carwale has `r length(unique(carwale$bodyType))` values. They are as follows:

```{r}
unique(cars24$bodyType)
```

```{r}
unique(carwale$bodyType)
```

### Observations

-   There are very few `NA` values which we will impute manually.

### Data Cleaning

```{r}
usedcars <- usedcars |> 
  mutate(bodyType = case_match(model,
                               "Verito" ~ "Compact Sedan",
                               c("Accord","City Hybrid eHEV") ~ "Sedan",
                               "Fiesta" ~ "Sedan",
                               "Countryman" ~ "Compact SUV",
                               .default = bodyType))
```

A quick look at the frequency of `bodyType` values

```{r}
#| label: bodyType
#| fig-cap: Car Body Type
#| echo: false
usedcars |> 
  count(bodyType, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(bodyType,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(bodyType,n), y = n, label = n), size = 2, nudge_y = 100) + 
  labs(title = "Hatchbacks are No.1",
       subtitle = "Available used cars types between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Body Types") + 
  coord_flip(ylim = c(0, 4800), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

## fuelType

Car24 has `r length(unique(cars24$fuelType))` values for `fuelType` column whereas Carwale has `r length(unique(carwale$fuelType))` values. They are as follows:

```{r}
unique(cars24$fuelType)
```

```{r}
unique(carwale$fuelType)
```

### Observations

-   Even though Carwale has fewer records, it has more variation in terms of `fuelType` of the used cars.

### Data Cleaning

A few cars have `NA` values for fuelType column. We will use an external file to map the correct fuelType values. For the sake of simplicity, we will combine a few of these fuel types into groups.

```{r}

fueltype_mapping <- read_csv("fuelType.csv", show_col_types = FALSE) |> rename("correctfuelType" = "fuelType") |> distinct()
usedcars <- usedcars |> 
  left_join(fueltype_mapping, by = c("make", "model", "variant")) |> 
  mutate(fuelType = coalesce(fuelType, correctfuelType),
         fuelType = case_when(
           str_detect(fuelType, "Hybrid ?\\(Electric") ~ "Electric Hybrid",
           str_detect(fuelType, " \\+ ") ~ "Flex Fuel",
           .default = fuelType
         )) |> 
  select(-correctfuelType)
  
```

A quick look at the frequency of `fuelType` values

```{r}
#| label: fuelType
#| fig-cap: Car Fuel Type
#| echo: false
usedcars |> 
  count(fuelType, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(fuelType,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(fuelType,n), y = n, label = n), size = 2, nudge_y = 150) + 
  labs(title = "Petrol and Diesel models still hold sway!",
       subtitle = "Available used cars by fuel type between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Fuel Type") + 
  coord_flip(ylim = c(0, 8200), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

## ownerNumber

Car24 has `r length(unique(cars24$ownerNumber))` values for `ownerNumber` column whereas Carwale has `r length(unique(carwale$ownerNumber))` values. They are as follows:

```{r}
unique(cars24$ownerNumber)
```

```{r}
unique(carwale$ownerNumber)
```

### Observations

-   Even though Carwale has fewer records, it has more variation in terms of `ownerNumber` of the used cars.
-   There are 60 missing values for `ownerNumber` column.

### Data Cleaning

There are 60 missing values for `ownerNumber` column. We will impute them in such a way that overall proportion remains the same.

```{r}
non_missing_owners <- usedcars |> filter(!is.na(ownerNumber)) |> nrow()

props <- usedcars |> filter(!is.na(ownerNumber)) |> summarise(p = n()/non_missing_owners, .by = ownerNumber) |> mutate(split60 = round(60 * p))

na_indices <- which(is.na(usedcars$ownerNumber))

new_owner_numbers <- sample(
  props$ownerNumber,
  length(na_indices),
  replace = TRUE,
  prob = props$p / sum(props$p)
)

usedcars$ownerNumber[na_indices] <- new_owner_numbers
```

A quick look at the frequency of `ownerNumber` values

```{r}
#| label: ownerNumber
#| fig-cap: Number of Previous Owners
#| echo: false
usedcars |> 
  count(ownerNumber, sort = TRUE) |> 
ggplot() + 
  geom_col(aes(x = fct_reorder(factor(ownerNumber),n, .desc = TRUE), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(factor(ownerNumber),n, .desc = TRUE), y = n, label = n), size = 4, nudge_y = 150) + 
  labs(title = "Most used cars have only 1 previous owner.",
       subtitle = "Available used cars by number of previous owners between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Number of Previous Owners") + 
  coord_cartesian(ylim = c(0, 8200), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

## odometerReading

`odometerReading` is the distance the used car has travelled in kilometers.

### Observations

-   TODO

### Data Cleaning

No data cleaning needed for `odometerReading` column.

A quick look at the frequency of `odometerReading` values

```{r}
#| label: odometerReading
#| fig-cap: Distance Travelled
#| echo: false

median_odo <- round(median(usedcars$odometerReading),0)
mean_odo <- round(mean(usedcars$odometerReading),0)

ggplot(usedcars) + 
  geom_histogram(aes(x = odometerReading), fill = "royalblue", bins = 100) + 
  geom_vline(xintercept = median_odo, linetype = "dashed", color = "red") +
  annotate("text", x = median_odo - 40000, y = 750, color = "red",
  label = glue("Median Odo Reading
               {median_odo} Kms")) + 
  geom_vline(xintercept = mean_odo, linetype = "dashed", color = "blue") +
  annotate("text", x = mean_odo + 200000, y = 750, color = "blue",
  label = glue("Average Odo Reading
               {mean_odo} Kms")) + 
  scale_x_log10() + 
  coord_cartesian(ylim = c(0, 900), expand = FALSE) +
  labs(title = "Most used cars have travelled less than 1 Lakh Kms!",
       subtitle = "Available used cars by odometer reading between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Odometer Reading (in Kms [Log 10 Scale])") + 
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

## cityRto

Car24 has `r length(unique(cars24$cityRto))` values for `cityRto` column whereas Carwale has `r length(unique(carwale$cityRto))` values.

### Observations

-   The column `cityRto` in the cars24 dataset displays the RTO number where the car was registered. The same column in carwale dataset displays the actual registration number.
-   There are 125 used cars without a `cityRto` value.

### Data Cleaning

We can extract only the first 4 characters from the `cityRto` column to make the values uniform across the full dataset

```{r}
#| label: cityRto data cleaning
usedcars <- usedcars |> 
  mutate(cityRto = str_sub(cityRto,1,4))
```

A quick look at the frequency of `cityRto` values

```{r}
#| label: cityRto 
#| fig-cap: Registration (RTO)
#| echo: false
usedcars |> 
  count(cityRto, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(cityRto,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(cityRto,n), y = n, label = n), size = 2, nudge_y = 10) + 
  labs(title = "Cars from MH12 Pune have maximum availability",
       subtitle = "Top 20 RTOs between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "RTO Number") + 
  coord_flip(ylim = c(0, 510), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

## listingPrice

`listingPrice` is the amount in Indian Rupees (₹) quoted for the used car.

### Observations

-   TODO

### Data Cleaning

No data cleaning needed for `listingPrice` column.

A quick look at the frequency of `listingPrice` values

```{r}
#| label: listingPrice
#| fig-cap: Car Price
#| echo: false

median_price <- round(median(usedcars$listingPrice),0)
mean_price <- round(mean(usedcars$listingPrice),0)
min_price <- round(min(usedcars$listingPrice),0)
max_price <- round(max(usedcars$listingPrice),0)

ggplot(usedcars) + 
  geom_histogram(aes(x = listingPrice), fill = "royalblue", bins = 100) + 
  geom_vline(xintercept = median_price, linetype = "dashed", color = "red") +
  annotate("text", x = median_price - 300000, y = 750, color = "red",
  label = glue("Median Price
               ₹ {format_indian(median_price)}/-")) + 
  geom_vline(xintercept = mean_price, linetype = "dashed", color = "blue") +
  annotate("text", x = mean_price + 1E6, y = 750, color = "blue",
  label = glue("Average Price
               ₹ {format_indian(mean_price)}/-")) + 
  annotate("text", x = min_price + 9*1E4, y = 250,
  label = glue("Min. Price
               ₹ {format_indian(min_price)}/-")) + 
  annotate("text", x = max_price - 2*1E7, y = 250,
  label = glue("Max. Price
               ₹ {format_indian(max_price)}/-")) + 
  scale_x_log10() + 
  coord_cartesian(ylim = c(0, 900), expand = FALSE) +
  labs(title = "Most cars are priced around 5-7 Lakhs!",
       subtitle = "Available used cars by price between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Listing Price (in ₹) [Log10 Scale]") + 
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 20, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```
