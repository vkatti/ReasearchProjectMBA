---
title: "Exploratory Data Analysis (EDA) for Used Cars data."
author: "Vishal Katti"
date: today
cache: true
format: 
  html:
    theme: darkly
    code-fold: true
    cap-location: bottom
    fig-numbering: true
    fig-align: center
    toc: true 
    lot: true
    lof: true
    fig.width: 8
    fig.height: 5
    fig-dpi: 600
fig_caption_style: "numbered"
---

# Introduction

After the web-scraping activity is completed, we will now perform exploratory data analysis on the used cars details.

# Data Sources

We have 2 CSV files in the **04_CarDetailsConsolidated** which we will ingest.

::: {style="text-align: center;"}
![CSV files to be ingested](images/clipboard-4217870750.png)
:::

## Ingestion

First we load the required R libraries and create two utility function `f` and `format_indian`

```{r}
#| label: Load Libraries
#| warning: false
#| message: false

library(tidyverse)
library(lubridate)  # To manage dates and times
library(janitor)    # To ensure consistent naming and other utilities
library(glue)       # To enable fancy printing
library(ggtext)

f <- function(x) { print(glue(x))} # quick printing

format_indian <- function(x) { #   #,##,##,### format
  x_str <- as.character(x)
  rev_x_str <- rev(strsplit(x_str, "")[[1]])
  first_three <- c(rev_x_str[1:3],",")
  all_others <- rev_x_str[4:length(rev_x_str)]
  grouped <- paste(all_others, collapse = "") 
  grouped <- gsub("([0-9]{2})(?=[0-9])", "\\1,", grouped, perl = TRUE) 
  first_three <- paste(first_three, collapse = "")
  final <- paste0(first_three,grouped, collapse = "")
  formatted <- paste(rev(strsplit(final, "")[[1]]), collapse = "")
  return(formatted)
}
```

Since will be cleaning and combining 2 datasets, one from *cars24* and other from *carwale*, we will perform same action twice and handle some special cases in either datasets.

```{r}
#| label: Read CSV
cars24 <- read_csv("../04_CarDetailsConsolidated/cars24.csv", 
                   na = c("","NA","MISSING","Not Available", "N/A"), show_col_types = FALSE)
carwale <- read_csv("../04_CarDetailsConsolidated/carwale.csv", 
                    na = c("","NA","MISSING","Not Available","N/A"), show_col_types = FALSE)

```

::: callout-note
## "MISSING" values

In our data extraction scripts from the **03_CarDetails** folder, you would've noticed that while extracting the car attributes, we set the default value to **MISSING** if the value is not available. Thus we know for a fact that **MISSING** indicates a missing value and therefore can be explicitly set to NA while reading the CSV files.

After a quick manual verification of CSV files, we also understood that some attributes were *Not Available* or *N/A* can can be considered as `NA`.

The `read_csv` function from **readr** package allows us to explicitly mention which values to be considered as `NA` while reading the data.
:::

## Duplicates

First thing we will do is eliminate duplicates. We know there are duplicates since we had to restart our web-scraping scripts couple of times due to various issues.\
We will use the `unique` function to remove duplicates.

```{r}
#| label: Duplicates - Cars24
#| code-fold: true

preDup <- nrow(cars24)
cars24 <- unique(cars24)
f("Cars24
-------------------------------------
Before removing duplicates: {preDup}
After removing duplicates: {nrow(cars24)}
Total duplicates removed: {preDup - nrow(cars24)}")
```

```{r}
#| label: Duplicates - carwale
#| code-fold: true

preDup <- nrow(carwale)
carwale <- unique(carwale)
f("Carwale
-------------------------------------
Before removing duplicates: {preDup}
After removing duplicates: {nrow(carwale)}
Total duplicates removed: {preDup - nrow(carwale)}")
```

## Columns and Data Types

We will now look at the columns and ensure that data types of the columns are correct.

```{r}
#| label: Columns and Data Types - Cars24

glimpse(cars24)
```

In above, we can see that `fitnessUpto` column has character datatype instead of date. We also note that the utility of the `websiteUrl` column is complete and we can remove this column from the dataset.

```{r}
#| label: Columns and Data Types - Cars24 (Clean)
cars24 <- cars24 |> 
  select(-websiteUrl) |> 
  mutate(fitnessUpto  = dmy(fitnessUpto))

glimpse(cars24)
```

```{r}
#| label: Columns and Data Types - Carwale
glimpse(carwale)
```

In above, we can see that `fitnessUpto` column has character datatype instead of date. We also note that the utility of the `websiteUrl` column is complete and we can remove this column from the dataset. Additionally, the `ownerNumber`, `registrationYear` and `registrationMonth` columns do not match the data type in the `cars24` dataset. Let's fix this.

```{r}
#| label: Columns and Data Types - Carwale (Clean)
#| warning: false
carwale <- carwale |> 
  select(-websiteUrl) |> 
  mutate(fitnessUpto  = dmy(fitnessUpto),
         registrationYear  = as_date(registrationYear, format = "%d/%m/%Y %H:%M:%S"),
         registrationMonth = month(registrationYear),
         registrationYear = year(registrationYear),
         registrationYear = if_else(registrationYear == 1, NA_integer_, registrationYear),
         registrationMonth = if_else(is.na(registrationYear), NA_integer_, registrationMonth),
         ownerNumber = case_match(ownerNumber,
                                  "First" ~ 1,
                                  "Second" ~ 2,
                                  "Third" ~ 3,
                                  c("Fourth", "4 or More") ~ 4,
                                  .default = NA_integer_)
         )

glimpse(carwale)
```

Comparing the datatypes of the two datasets using waldo::compare function confirms that both datasets have same columns and datatypes and thus, can be combined together for futher clean-up.

```{r}
#| label: Compare
waldo::compare(sapply(cars24, typeof), sapply(carwale,typeof))
waldo::compare(sapply(cars24, class), sapply(carwale,class))
waldo::compare(colnames(cars24), colnames(carwale))

```

# Combined Data

Let us combine the 2 datasets.

```{r}
#| label: Combine
usedcars <- bind_rows(cars24, carwale) |> distinct()

f("Number of Rows in Combined Dataset: {nrow(usedcars)}")
```

# Column-wise Analysis and clean-up

```{r}
#| label: print column names
cat(names(usedcars), sep = "\n")
```

::: {.panel-tabset .nav-pills}
## make

# Car Brand (Make)

The make of the car refers to the name of the brand or the manufacturing company.

Car24 has `r length(unique(cars24$make))` values for `make` column whereas Carwale has `r length(unique(carwale$make))` values. They are as follows:

```{r}
unique(cars24$make)
```

```{r}
unique(carwale$make)
```

**Data Cleaning**

There are 2 different values for *Kia* and *Maruti* in Cars24 and Carwale datasets. Let us standardize them so they are considered as the same.

```{r}
#| label: make data cleaning
usedcars <- usedcars |> 
  mutate(make = case_match(make,
                           "Kia" ~ "KIA",
                           "Maruti Suzuki" ~ "Maruti",
                           .default = make))
```

**Visualization**

```{r}
#| label: make 
#| fig-cap: Car Brands (Make)
#| echo: false
usedcars |> 
  count(make, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(make,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(make,n), y = n, label = n), size = 2, nudge_y = 50) + 
  labs(title = "Maruti leads the way!",
       subtitle = "Top 20 available used cars brands between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Car Brand (Make)") + 
  coord_flip(ylim = c(0, 3100), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Even though Carwale has fewer records, it has more variation in terms of `make` of the used cars.
-   Maruti and Hyundai are the most abundant used cars.

## model

# Model

Every car manufacturer produces more than 1 model of the car. Each model has different attributes catering to different audiences and thus priced accordingly.

Car24 has `r length(unique(cars24$model))` unique `model`s column whereas Carwale has `r length(unique(carwale$model))` unique `model`s.

**Data Cleaning**

The `model` values in Carwale includes the start and end year of the model. We can remove this to make it more consistent with Cars24 data. There are also a few corrections (Letter case related) which we will perform here.

```{r}
usedcars <- usedcars |> 
  mutate(model = str_remove(model," ?\\[.*\\]$"),
         lmodel  = str_to_lower(model))

model_bodytype_mapping <- read_csv("multi_bodyTypes.csv", show_col_types = FALSE)

usedcars <- usedcars |> 
  left_join(model_bodytype_mapping, by = c("make", "lmodel")) |> 
  mutate(model = if_else(!is.na(correctmodel), correctmodel, model),
         bodyType = if_else(!is.na(correctbodyType), correctbodyType, bodyType),
         bodyType = if_else(is.na(bodyType), correctbodyType, bodyType)) |> 
  select(-correctmodel, -correctbodyType, -lmodel)

```

**Visualization**

```{r}
#| label: model
#| fig-cap: Car Models
#| echo: false
usedcars |> 
  count(model, sort = TRUE) |> 
  slice_head(n = 20) |> 
ggplot() + 
  geom_col(aes(x = fct_reorder(model,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(model,n), y = n, label = n), size = 2, nudge_y = 10) + 
  labs(title = "Maruti Suzuki - Baleno has highest availability!",
       subtitle = "Top 20 most available used cars between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Car Model") + 
  coord_flip(ylim = c(0, 510), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Maruti Suzuki Baleno and Hyundai Grand i10 are most abundant model.

## variant

# Variant

Every model can have multiple `variant`s, based on fuel type, transmission, internal features or engine capacity.

Car24 has `r length(unique(cars24$variant))` unique `variant` values whereas Carwale has `r length(unique(carwale$variant))`.

**Data Cleaning**

The `variant` values sometimes contain additional info like fuel type, gearbox type (transmission), engine capacity. However, this information is already available in other columns. Hence we will try to standardize the values in the `variant` column.

```{r}
clean_variants <- read_csv("./variants_cleaned.csv", show_col_types = FALSE) |> distinct()
```


```{r}
usedcars <- usedcars |> 
  mutate(make = if_else(make == "redi-GO", "Redi GO", make)) |> 
  left_join(clean_variants, by=c("make","model","variant")) |> 
  select(-variant) |> 
  rename("variant" = "model_variant") |> 
  select(make, model, variant, everything())

```

**Visualization**

```{r}
#| label: variant
#| fig-cap: Car Variants
#| echo: false
usedcars |> 
  count(make, model, variant, sort = TRUE) |> 
  mutate(mv = paste(make, variant)) |> 
  slice_head(n = 20) |> 
ggplot() + 
  geom_col(aes(x = fct_reorder(mv,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(mv,n), y = n, label = n), size = 2, nudge_y = 5) + 
  labs(title = "Maruti, Hyundai and Honda rule the roost!",
       subtitle = "Top 20 most available used cars variants between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Car Variant") + 
  coord_flip(ylim = c(0, 310), expand = TRUE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Maruti, Hyundai and Honda cars are most abundant across both the platforms.

## year

# Year

This is the year when this model was launched.

Car24 has listed car models from `r min(cars24$year)` whereas Carwale has car models from `r min(carwale$year)`.

**Data Cleaning**

No data cleaning required for `year` column.

**Visualization**

```{r}
#| label: year
#| fig-cap: Year of the Car Model/Variant
#| echo: false

mean_age <- mean(2024 - usedcars$year)
median_age <- median(2024 - usedcars$year)

usedcars |> 
  count(year) |> 
ggplot() + 
  geom_col(aes(x = factor(year), y = n, fill = year)) +
  geom_text(aes(x = factor(year), y = n, label = n), size = 2, nudge_y = 50) + 
  geom_vline(xintercept = factor(2024 - median_age), color = "red", linetype="dashed") + 
  annotate("text",x = factor(2022 - median_age), y = 1400, label = "Median Age", color = "red") +
  labs(title = "Most used cars are 5-7 years old models",
       subtitle = "Year-wise availability between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Year") + 
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank()) 
```

**Observations**

-   Even though Carwale has fewer records, it has more variation in terms of `year` of the used cars.
-   Most available cars are 5-7 year old models.

## transmission

# Transmission (aka Gear Type)

This basically indicates what type of gear system the car has. It could have Manual gears, Clutchless Manual gears, AMT, AT, CVT, DCT or others. Each of these types have different technology and each have different fuel efficiency, performance and pricing.

Car24 has `r length(unique(cars24$transmission))` different types for `transmission` whereas Carwale has `r length(unique(carwale$transmission))` values.

**Data Cleaning**

To reduce the number of variations, we will club few values under common name.

```{r}
usedcars <- usedcars |> 
  mutate(transmission = case_when(str_detect(transmission, "Automatic|AMT") ~ "Automatic",
                                  .default = "Manual"))
```

**Visualization**

```{r}
#| label: transmission
#| fig-cap: Car Transmission
#| echo: false
usedcars |> 
  count(transmission, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(transmission,n, .desc = TRUE), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(transmission,n, .desc = TRUE), y = n, label = n), size = 10, nudge_y = -500, color = "white") + 
  labs(title = "Not enough Automatic transmission cars in the Market!",
       subtitle = "Used cars brands between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Car Transmission Type") + 
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Even though Carwale has fewer records, it has more variation in terms of `trasmission` of the used cars.
-   Additional information about the type of transmission in Automatic is available in Carwale dataset but not available in Cars24.

## bodyType

# Body Type

This indicate what type of car is it. Some body types are HatchBack, Sedan, SUV, MUV, Compact SUV etc.

Car24 has `r length(unique(cars24$bodyType))` values for `bodyType` column whereas Carwale has `r length(unique(carwale$bodyType))` values. They are as follows:

Cars24 Body types:

```{r}
unique(cars24$bodyType)
```

Carwale Body types:

```{r}
unique(carwale$bodyType)
```

**Data Cleaning**

There are very few `NA` values which we will impute manually. After some careful examination, we noticed that in some cases, the same make-model-variant combination has mutiple bodytypes which is incorrect. So we created a CSV file with correct body types and used it as a reference to correct the body types. This was done in the Data Cleaning section of the `model` column. A few others were imputed manually below.

```{r}
usedcars <- usedcars |> 
  mutate(bodyType = case_match(model,
                               "Verito" ~ "Compact Sedan",
                               c("Accord","City Hybrid eHEV") ~ "Sedan",
                               "Fiesta" ~ "Sedan",
                               "Countryman" ~ "Compact SUV",
                               .default = bodyType))
```

**Visualization**

```{r}
#| label: bodyType
#| fig-cap: Car Body Type
#| echo: false
usedcars |> 
  count(bodyType, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(bodyType,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(bodyType,n), y = n, label = n), size = 2, nudge_y = 100) + 
  labs(title = "Hatchbacks are No.1",
       subtitle = "Available used cars types between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Body Types") + 
  coord_flip(ylim = c(0, 4800), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Hatchbacks are most abundant body type acros both platforms.

## fuelType

# Fuel Type

This indicates which fuel is used by the car.

Car24 has `r length(unique(cars24$fuelType))` values for `fuelType` column whereas Carwale has `r length(unique(carwale$fuelType))` values. They are as follows:

```{r}
unique(cars24$fuelType)
```

```{r}
unique(carwale$fuelType)
```

**Data Cleaning**

A few cars have `NA` values for fuelType column. We will use an external file to map the correct fuelType values. For the sake of simplicity, we will combine a few of these fuel types into groups.

```{r}

fueltype_mapping <- read_csv("fuelType.csv", show_col_types = FALSE) |> rename("correctfuelType" = "fuelType") |> distinct()
usedcars <- usedcars |> 
  left_join(fueltype_mapping, by = c("make", "model", "variant")) |> 
  mutate(fuelType = coalesce(fuelType, correctfuelType),
         fuelType = case_when(
           str_detect(fuelType, "Hybrid ?\\(Electric") ~ "Electric Hybrid",
           str_detect(fuelType, " \\+ ") ~ "Flex Fuel",
           .default = fuelType
         )) |> 
  select(-correctfuelType)
  
```

**Visualization**

```{r}
#| label: fuelType
#| fig-cap: Car Fuel Type
#| echo: false
usedcars |> 
  count(fuelType, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(fuelType,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(fuelType,n), y = n, label = n), size = 2, nudge_y = 150) + 
  labs(title = "Petrol and Diesel models still hold sway!",
       subtitle = "Available used cars by fuel type between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Fuel Type") + 
  coord_flip(ylim = c(0, 8200), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Even though Carwale has fewer records, it has more variation in terms of `fuelType` of the used cars.
-   Petrol and Diesel cars are still quite abundant across both platforms.

## ownerNumber

# Owner Number

This is the number of previous owners for given car.

**Data Cleaning**

There are 60 missing values for `ownerNumber` column. We will impute them in such a way that overall proportion remains the same.

```{r}
non_missing_owners <- usedcars |> filter(!is.na(ownerNumber)) |> nrow()

props <- usedcars |> filter(!is.na(ownerNumber)) |> summarise(p = n()/non_missing_owners, .by = ownerNumber) |> mutate(split60 = round(60 * p))

na_indices <- which(is.na(usedcars$ownerNumber))

set.seed(42)
new_owner_numbers <- sample(
  props$ownerNumber,
  length(na_indices),
  replace = TRUE,
  prob = props$p / sum(props$p)
)

usedcars$ownerNumber[na_indices] <- new_owner_numbers
```

A quick look at the frequency of `ownerNumber` values

```{r}
#| label: ownerNumber
#| fig-cap: Number of Previous Owners
#| echo: false
usedcars |> 
  count(ownerNumber, sort = TRUE) |> 
ggplot() + 
  geom_col(aes(x = fct_reorder(factor(ownerNumber),n, .desc = TRUE), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(factor(ownerNumber),n, .desc = TRUE), y = n, label = n), size = 4, nudge_y = 150) + 
  labs(title = "Most used cars have only 1 previous owner.",
       subtitle = "Available used cars by number of previous owners between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Number of Previous Owners") + 
  coord_cartesian(ylim = c(0, 8200), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   There were 60 missing values for `ownerNumber` column which we imputed to maintain the overall proportion.
-   Most used cars have only 1 previous owner.

## odometerReading

# Odometer Reading

`odometerReading` is the distance the used car has travelled in kilometers.

**Data Cleaning**

No data cleaning needed for `odometerReading` column.

**Visualization**

```{r}
#| label: odometerReading
#| fig-cap: Distance Travelled
#| echo: false

median_odo <- round(median(usedcars$odometerReading),0)
mean_odo <- round(mean(usedcars$odometerReading),0)

ggplot(usedcars) + 
  geom_histogram(aes(x = odometerReading), fill = "royalblue", bins = 100) + 
  geom_vline(xintercept = median_odo, linetype = "dashed", color = "red") +
  annotate("text", x = median_odo - 40000, y = 750, color = "red",
  label = glue("Median Odo Reading
               {median_odo} Kms")) + 
  geom_vline(xintercept = mean_odo, linetype = "dashed", color = "blue") +
  annotate("text", x = mean_odo + 200000, y = 750, color = "blue",
  label = glue("Average Odo Reading
               {mean_odo} Kms")) + 
  scale_x_log10() + 
  coord_cartesian(ylim = c(0, 900), expand = FALSE) +
  labs(title = "Most used cars have travelled less than 1 Lakh Kms!",
       subtitle = "Available used cars by odometer reading between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Odometer Reading (in Kms [Log 10 Scale])") + 
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Most used cars have travelled less than 1 lakh kilometers.

## cityRto

# City RTO

This is the RTO label of the car's registration office.

**Data Cleaning**

We can extract only the first 4 characters from the `cityRto` column to make the values uniform across the full dataset

```{r}
#| label: cityRto data cleaning
usedcars <- usedcars |> 
  mutate(cityRto = str_sub(cityRto,1,4))
```

**Visualization**

```{r}
#| label: cityRto 
#| fig-cap: Registration (RTO)
#| echo: false
usedcars |> 
  count(cityRto, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(cityRto,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(cityRto,n), y = n, label = n), size = 2, nudge_y = 10) + 
  labs(title = "Cars from MH12 Pune have maximum availability",
       subtitle = "Top 20 RTOs between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "RTO Number") + 
  coord_flip(ylim = c(0, 510), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   The column `cityRto` in the cars24 dataset displays the RTO number where the car was registered. The same column in carwale dataset displays the actual registration number.
-   There are 125 used cars without a `cityRto` value.
-   Pune, Maharashtra-registered MH12 cars followed by Ahmedabad-Gujarat GJ01 are most abundant across both platforms.
-   Cars with other-state registrations are also available across all regions.

## listingPrice

# Listing Price

`listingPrice` is the amount in Indian Rupees (₹) quoted for the used car.

**Data Cleaning**

No data cleaning needed for `listingPrice` column.

A quick look at the frequency of `listingPrice` values

```{r}
#| label: listingPrice
#| fig-cap: Car Price
#| echo: false

median_price <- round(median(usedcars$listingPrice),0)
mean_price <- round(mean(usedcars$listingPrice),0)
min_price <- round(min(usedcars$listingPrice),0)
max_price <- round(max(usedcars$listingPrice),0)

ggplot(usedcars) + 
  geom_histogram(aes(x = listingPrice), fill = "royalblue", bins = 100) + 
  geom_vline(xintercept = median_price, linetype = "dashed", color = "red") +
  annotate("text", x = median_price - 300000, y = 750, color = "red",
  label = glue("Median Price
               ₹ {format_indian(median_price)}/-")) + 
  geom_vline(xintercept = mean_price, linetype = "dashed", color = "blue") +
  annotate("text", x = mean_price + 1E6, y = 750, color = "blue",
  label = glue("Average Price
               ₹ {format_indian(mean_price)}/-")) + 
  annotate("text", x = min_price + 9*1E4, y = 250,
  label = glue("Min. Price
               ₹ {format_indian(min_price)}/-")) + 
  annotate("text", x = max_price - 2*1E7, y = 250,
  label = glue("Max. Price
               ₹ {format_indian(max_price)}/-")) + 
  scale_x_log10() + 
  coord_cartesian(ylim = c(0, 900), expand = FALSE) +
  labs(title = "Most cars are priced around 5-7 Lakhs!",
       subtitle = "Available used cars by price between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Listing Price (in ₹) [Log10 Scale]") + 
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Most cars are priced around 5-7 Lakhs
-   Average is more than Median due to presence of ultra-high Luxury brands.


## fitnessUpto

# Fitness Upto

This is the end date of a car's Fitness Certificate. Every car gets a fitness certificate which is valid for 15 years. After the fitness certificate expires, a new one has to be issued which is an expensive and time-consuming activity.

Car24 has `r nrow(cars24[!is.na(cars24$fitnessUpto), ])` cars with `fitnessUpto` dates whereas Carwale has `r nrow(carwale[!is.na(carwale$fitnessUpto), ])` cars with valid `fitnessUpto` dates.

**Data Cleaning**

No data cleaning is needed. The datatype conversion was handled earlier in this document.

**Visualization**

```{r}
#| label: fitnessUpto 
#| fig-cap: Car Fitness Validity
#| echo: false
usedcars |> mutate(Valid = year(fitnessUpto) - 2024) |> 
  count(Valid, sort = TRUE) |> 
  mutate(Valid = if_else(is.na(Valid),-1,Valid)) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = Valid, y = n, fill = n)) +
  geom_text(aes(x = Valid, y = n, label = n), size = 3, nudge_y = 100) + 
  annotate("text", x = 3, y = 4000, label = "Carwale does not provide Fitness info") +
  labs(title = "Most cars have adequate validity!",
       subtitle = "Fitness validity of used cars between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Car Fitness (in Years)") + 
  coord_cartesian(ylim = c(0, 5000), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Carwale does not provide Fitness Certificate info upfront.
-   Most cars have adequate Fitness Validity.

## insuranceType

# Insurance Type

The type of Insurance the car is covered under. Some cars which may have been listed for more than a year may have an expired Insurance while some may not insurance at all.

Car24 has `r length(unique(cars24$insuranceType))` values for `insuranceType` column whereas Carwale has `r length(unique(carwale$insuranceType))` values. They are as follows:

```{r}
unique(cars24$insuranceType)
```

```{r}
unique(carwale$insuranceType)
```

**Data Cleaning**

Let us standardize the values so we can club them. Here we make this assumption that cars with missing Insurance Type do not have Insurance.

```{r}
#| label: insuranceType data cleaning
usedcars <- usedcars |> 
  mutate(insuranceType = case_match(insuranceType,
                           "Insurance Expired" ~ "Expired",
                           "3rd Party" ~ "Third Party",
                           NA_character_ ~ "No Insurance",
                           .default = insuranceType))
```

**Visualization**

```{r}
#| label: insuranceType 
#| fig-cap: Insurance Coverage
#| echo: false
usedcars |> 
  count(insuranceType, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(insuranceType,n), y = n, fill = if_else(insuranceType %in% c("Comprehensive","Third Party", "Zero Depreciation"),"yes","no"))) +
  geom_text(aes(x = fct_reorder(insuranceType,n), y = n, label = n), size = 3, nudge_y = 120) + 
  labs(title = "Most used cars have insurance!",
       subtitle = "Insurance status of used cars between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Insurance Type") + 
  coord_flip(ylim = c(0, 4800), expand = FALSE) + 
  scale_fill_manual(values = c("yes" = "royalblue4", "no" = "salmon")) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Car24 does not have any cars that is not covered under insurance, unlike Carwale.
-   Most of the listed cars have insurance coverage.

## duplicateKey

# Duplicate Key

This is an indicator if a duplicate key is available. Some newer models tend to have Electronic Keys which are quite expensive (approx ₹10K or more) and the availability of duplicate keys is a big plus!

Car24 has `r length(unique(cars24$duplicateKey))` values for `duplicateKey` column whereas Carwale has `r length(unique(carwale$duplicateKey))` values. They are as follows:

```{r}
unique(cars24$duplicateKey)
```

```{r}
unique(carwale$duplicateKey)
```

**Data Cleaning**

No data cleaning required for `duplicateKey`.

**Visualization**

```{r}
#| label: duplicateKey 
#| fig-cap: Duplicate Key Availability
#| echo: false
usedcars |> 
  count(duplicateKey, sort = TRUE) |> 
  mutate(duplicateKey = if_else(duplicateKey,"Available", "Not Available", "Don't Know" )) |> 
ggplot() + 
  geom_col(aes(x = fct_reorder(duplicateKey,n), y = n, fill = duplicateKey)) +
  geom_text(aes(x = fct_reorder(duplicateKey,n), y = n, label = n), size = 3, nudge_y = 200) + 
  labs(title = "Carwale has no duplicate key availability info",
       subtitle = "Duplicate Key availability between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Duplicate Key Availability") + 
  coord_flip(ylim = c(0, 6500), expand = FALSE) +
  scale_fill_manual(values = c("Available" = "royalblue4", 
                               "Not Available" = "salmon",
                               "Don't Know"  = "grey50")) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Carwale does not provide `duplicateKey` availability info.
-   Only around 36% records have duplicate keys. Unfortunately, we have too many missing records for this indicator to be considered important.

## city

# City

This is the city or location where the car has been listed and is available for sale.

Car24 caters to `r length(unique(cars24$city))` cities/regions whereas Carwale caters to `r length(unique(carwale$city))`. They are as follows:

```{r}
unique(cars24$city)
```

```{r}
unique(carwale$city)
```

**Data Cleaning**

We will combined `Delhi` and `New Delhi` under same group and rename `Bangalore` to `Bengaluru`.

```{r}
#| label: city data cleaning
usedcars <- usedcars |> 
  mutate(city = case_match(city,
                           "Delhi" ~ "New Delhi",
                           "Bangalore" ~ "Bengaluru",
                           .default = city))
```

**Visualization**

```{r}
#| label: city 
#| fig-cap: City (Available in)
#| echo: false
usedcars |> 
  count(city, sort = TRUE) |> 
  slice_head(n=20) |>  
ggplot() + 
  geom_col(aes(x = fct_reorder(city,n), y = n, fill = n)) +
  geom_text(aes(x = fct_reorder(city,n), y = n, label = n), size = 3, nudge_y = 50) + 
  labs(title = "Bengaluru leads the way!",
       subtitle = "Top 20 cities with used cars availability between May 2024 till Sep 2024",
       y = "Number of Available Used Cars",
       x = element_blank()) + 
  coord_flip(ylim = c(0, 1750), expand = FALSE) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank())
```

**Observations**

-   Bengaluru has the maximum number of used cars available.

## registrationYear

# Registration Year

The year when the vehicle was first registered.

**Data Cleaning**

There is one car with `registrationYear` = 2025. This needs to be made 2024

```{r}
usedcars <- usedcars |> 
  mutate(registrationYear = if_else(registrationYear==2025, 2024, registrationYear))
```

A quick look at the frequency of `registrationYear` values

```{r}
#| label: registrationYear
#| fig-cap: Year of Registration of the Car
#| echo: false

mean_age <- mean(2024 - usedcars$registrationYear, na.rm = TRUE)
median_age <- median(2024 - usedcars$registrationYear, na.rm = TRUE)

usedcars |> 
  count(registrationYear) |> 
ggplot() + 
  geom_col(aes(x = factor(registrationYear), y = n, fill = registrationYear)) +
  geom_text(aes(x = factor(registrationYear), y = n, label = n), size = 2, nudge_y = 50) + 
  geom_vline(xintercept = factor(2024 - median_age), color = "red", linetype="dashed") + 
  annotate("text",x = factor(2022 - median_age), y = 1400, label = "Median Age", color = "red") +
  annotate("text",x = factor(2022), y = 3000, label = "Carwale does not provide
  Registration year info") +
  labs(title = "Most used cars are 5-7 years old registrations",
       subtitle = "Year-wise availability between May 2024 till Sep 2024",
       y = "Number of Used Cars",
       x = "Year") + 
  theme_minimal() +
  theme(plot.title.position = "plot",
        plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
        legend.position = "none",
        axis.line.y = element_blank()) 
```

**Observations**

-   Most used cars were registered 5-7 years ago.
-   Carwale does not provide info about Registration year upfront.
:::

# Effects on Price

## Make

::: panel-tabset
## Ordered By Min Price

```{r}
#| label: make-minPrice
#| fig-asp: 1.5
#| echo: false
usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "make") |> 
  ggplot(aes(x = fct_reorder(make,minPrice))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) + 
  labs(title = "Car Brands with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       subtitle = "Ordered by Min listing price.",
       x = "Car Brands (Make)",
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(title = element_markdown(),
          plot.title.position = "plot")
```

## Median Price

```{r}
#| label: make-medianPrice
#| fig-asp: 1.5
#| echo: false
usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "make") |> 
  ggplot(aes(x = fct_reorder(make,medianPrice))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  labs(title = "Car Brands with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       subtitle = "Ordered by Median listing price.",
       x = "Car Brands (Make)",
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(title = element_markdown(),
          plot.title.position = "plot")
```

## Mean Price

```{r}
#| label: make-meanPrice
#| fig-asp: 1.5
#| echo: false
usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "make") |> 
  ggplot(aes(x = fct_reorder(make,meanPrice))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  labs(title = "Car Brands with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       subtitle = "Ordered by Mean listing price.",
       x = "Car Brands (Make)",
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(title = element_markdown(),
          plot.title.position = "plot")
```

## Max Price

```{r}
#| label: make-maxPrice
#| fig-asp: 1.5
#| echo: false
usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "make") |> 
  ggplot(aes(x = fct_reorder(make,maxPrice))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  labs(title = "Car Brands with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       subtitle = "Ordered by Max listing price.",
       x = "Car Brands (Make)",
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(title = element_markdown(),
          plot.title.position = "plot")
```
:::

## Year

```{r}
#| label: year-listingPrice
#| echo: false


usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "year") |> 
  ggplot(aes(x = factor(year))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  labs(title = "Newer Models have highest listing prices",
       subtitle = "Year with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       x = "Year",
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(plot.subtitle = element_markdown(),
          plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
          plot.title.position = "plot")
```

## Transmission

```{r}
#| label: transmission-listingPrice
#| echo: false


usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "transmission") |> 
  ggplot(aes(x = factor(transmission))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  labs(title = "Cars with Automatic Transmissions cost more!",
       subtitle = "Transmission with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       x = element_blank(),
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(plot.subtitle = element_markdown(),
          plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
          plot.title.position = "plot")
```

## Body Type

```{r}
#| label: bodyType-listingPrice
#| echo: false


usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "bodyType") |> 
  ggplot(aes(x = fct_reorder(factor(bodyType), medianPrice, .desc=TRUE))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  labs(title = "Minivans, Hatchbacks and Compact Sedans are most affordable!",
       subtitle = "Cars Body Types with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       x = element_blank(),
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(plot.subtitle = element_markdown(),
          plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
          plot.title.position = "plot")
```

## Fuel Type

```{r}
#| label: fuelType-listingPrice
#| echo: false


usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "fuelType") |> 
  ggplot(aes(x = fct_reorder(factor(fuelType), minPrice, .desc=TRUE))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  labs(title = "Electric and Hybrid cars are most expensive overall!",
       subtitle = "Cars Fuel Types with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       x = element_blank(),
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(plot.subtitle = element_markdown(),
          plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
          plot.title.position = "plot")
```

## Owner Number

```{r}
#| label: ownerNumber-listingPrice
#| echo: false


usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            medianPricefmt = paste0("₹", format_indian(median(listingPrice)),"/-"),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "ownerNumber") |> 
  ggplot(aes(x = ownerNumber)) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  geom_path(aes(y = medianPrice), color = "grey40", linetype = "dashed") +
  geom_text(aes(x = ownerNumber - 0.1, y = minPrice+1E5, label = paste0("N = ", n))) +
  geom_text(aes(x = ownerNumber + 0.1, y = medianPrice+3*1E5, label = medianPricefmt)) +
  labs(title = "Listing Price decreases with more previous owners!",
       subtitle = "Owner Number with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       x = element_blank(),
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  scale_x_reverse() +
  coord_flip() +
  theme_minimal() +
    theme(plot.subtitle = element_markdown(),
          plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
          plot.title.position = "plot")
```

## Odometer Reading

```{r}
#| label: odometerReading-listingPrice
#| echo: false


usedcars |> filter(make == "Maruti", model=="Baleno", ownerNumber==1) |> 
  ggplot(aes(x = odometerReading, y = listingPrice)) +
  geom_point() +
  geom_smooth(method = 'lm',formula = 'y ~ x') +
  labs(title = "Cars with High Odometer readings cost less!",
       subtitle = "This chart shows the trend for Maruti Baleno with 1 Previous Owner\nThis trend stays true for all combinations of Make, Model and OwnerNumber.",
       x = "Odometer Reading (in Kms)",
       y  = "Listing Price (in ₹)  [Log10 Scale]") +
  scale_y_log10(breaks = c(2E5,5E5,7E5,1E6), labels = c("2L","5L","7L","10L")) +
  theme_minimal() +
    theme(plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
          plot.title.position = "plot")
```

## Insurance Type

```{r}
#| label: insuranceType-listingPrice
#| echo: false


usedcars |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "insuranceType") |> 
  ggplot(aes(x = fct_reorder(factor(insuranceType), minPrice, .desc=TRUE))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  labs(title = "Insurance Type doesn't matter!",
       subtitle = "Cars with or without Insurance with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       x = element_blank(),
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(plot.subtitle = element_markdown(),
          plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
          plot.title.position = "plot")
```

## duplicateKey

```{r}
#| label: duplicateKey-listingPrice
#| echo: false


usedcars |> filter(!is.na(duplicateKey)) |> 
  summarise(minPrice = min(listingPrice),
            maxPrice = max(listingPrice),
            medianPrice = median(listingPrice),
            meanPrice = mean(listingPrice),
            n = n(),
            .by = "duplicateKey") |> 
  mutate(duplicateKey = if_else(duplicateKey,"Available","Not Available")) |> 
  ggplot(aes(x = fct_reorder(factor(duplicateKey), minPrice, .desc=TRUE))) +
  geom_segment(aes(y = minPrice, yend = maxPrice)) +
  geom_point(aes(y = minPrice), color = "red", size=5) +
  geom_point(aes(y = maxPrice), color = "green", size=4) +
  geom_point(aes(y = medianPrice), color = "blue", size=3) +
  geom_point(aes(y = meanPrice), color = "salmon", size=2) +
  labs(title = "Duplicate Key availability doesn't matter!",
       subtitle = "Cars with or without Duplicate Key with their <b><span style='color:red'>Min</span></b>, <b><span style='color:blue'>Median</span></b>, <b><span style='color:salmon'>Mean</span></b> and <b><span style='color:green'>Max</span></b> listing prices",
       x = element_blank(),
       y  = "Listing Price (in ₹)") +
  scale_y_log10() +
  coord_flip() +
  theme_minimal() +
    theme(plot.subtitle = element_markdown(),
          plot.title = element_text(face = "bold", size = 15, color = "royalblue"),
          plot.title.position = "plot")
```

# Export to RDS

```{r}
usedcars |> distinct() |> saveRDS("usedcars.rds")
```
